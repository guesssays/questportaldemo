// netlify/functions/send-telegram.js
// Node 18+ (–≤ Netlify –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å—Ç—å fetch). –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–Ω—É—Ç—å –∏–∑ 'undici'.

export async function handler(event) {
  // CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º POST —Å —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞)
  const origin = event.headers.origin || '*';
  const corsHeaders = {
    'Access-Control-Allow-Origin': origin,
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Vary': 'Origin'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers: corsHeaders, body: 'ok' };
  }
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, headers: corsHeaders, body: 'Method Not Allowed' };
  }

  try {
    const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = process.env;
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      return {
        statusCode: 500,
        headers: corsHeaders,
        body: JSON.stringify({ ok: false, error: 'Missing env: TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID' })
      };
    }

    const data = JSON.parse(event.body || '{}');

    // honeypot (–¥–æ–±–∞–≤–∏–º –≤ —Ñ–æ—Ä–º–µ –ø–æ–ª–µ botcheck)
    if (data.botcheck) {
      return { statusCode: 200, headers: corsHeaders, body: JSON.stringify({ ok: true }) };
    }

    // –ø—Ä–æ—Å—Ç–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const required = ['name', 'phone', 'date', 'time', 'quest', 'players'];
    const missing = required.filter(k => !data[k] || String(data[k]).trim() === '');
    if (missing.length) {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({ ok: false, error: 'Missing fields: ' + missing.join(', ') })
      };
    }

    const name    = String(data.name).trim();
    const phone   = String(data.phone).trim();
    const date    = String(data.date).trim();
    const time    = String(data.time).trim();
    const quest   = String(data.quest).trim();
    const players = String(data.players).trim();
    const comment = (data.comment ? String(data.comment).trim() : '');

// ‚îÄ‚îÄ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const title = escapeMd('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Å–∞–π—Ç)'); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏
const text = [
  `üéØ *${title}*`,
  `*–ò–º—è:* ${escapeMd(name)}`,
  `*–¢–µ–ª–µ—Ñ–æ–Ω:* ${escapeMd(phone)}`,
  `*–ö–≤–µ—Å—Ç:* ${escapeMd(quest)}`,
  `*–î–∞—Ç–∞/–≤—Ä–µ–º—è:* ${escapeMd(date)} ${escapeMd(time)}`,
  `*–ò–≥—Ä–æ–∫–∏:* ${escapeMd(players)}`,
  comment ? `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${escapeMd(comment)}` : ''
].filter(Boolean).join('\n');

const tgUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
const resp = await fetch(tgUrl, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'MarkdownV2' })
});
const tg = await resp.json();
if (!tg.ok) {
  return {
    statusCode: 502,
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    body: JSON.stringify({ ok:false, error: tg.description || 'Telegram API error' }) // ‚Üê –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏—á–∏–Ω—É
  };
}


    return {
      statusCode: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      body: JSON.stringify({ ok: true })
    };
  } catch (err) {
    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({ ok: false, error: err.message })
    };
  }
};

// –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥ Markdown Telegram
function escapeMd(s) {
  return s.replace(/([_\*\[\]\(\)~`>#+\-=|{}\.!\\])/g, '\\$1'); // + –ø–æ–¥—á–∏—Å—Ç–∫–∞ –¥–ª—è V2
}